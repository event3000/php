<?php
// однострочный комментарий в стиле c++

/*
    многострочный
    комментарий
 */

# комментарий в стиле оболочки Unix

// PHP требует окончания инструкций точкой запятой в конце каждой инструкции.

echo "Something"; // вывод информации на экран
var_dump("smth"); // Отладка

//Переменные помечаются знаком доллара, за которым следует имя переменной
$var_name;

// 1. первым символом имени должна быть буква или знак подчеркивания,
//  за которым следует любая комбинация букв, цифр или знаков подчеркивания;
// 2.имя не может содержать зарезервированные слова или специальные символы;
// 3.имена чувствительны к регистру, поэтому $a и $A являются разными переменными

// По умолчанию, переменные всегда присваиваются по значению.


// хранение по ссылке
$var1 = 56;
$var2 = &$var1;  // для хранения переменных по ссылке,
// необходимо перед переменной поставит амперсанд (&)

// переменные переменных
//$a = 'first var';
//$$a = 'hello';
//$$$a = 'world';

//echo "$a ${$a} ${${$a}}<br>";

$a = 'hello';
$$a = 'world';
echo "$a ${$a}<br>";
echo "$a ${$a} $hello<br>";
//$$a: $ + $a: $ + hello => $hello

// Предопределённые переменные - содержат всё, от внешних данных до переменных среды окружения,
// от текста сообщений об ошибках до последних полученных заголовков.

$GLOBALS; // Ссылки на все переменные глобальной области видимости
$_SERVER; // Информация о сервере и среде исполнения
$_REQUEST; // Переменные HTTP-запроса

// Типы данных в PHP

//Простые (скалярные) типы:
//   1) boolean - логический тип
//   2) integer - целочисленный
//   3) float (double) - число с плавающей точкой
//   4) string - строка

//Смешанные типы:
//    1) array (ассоциативные и нумерованные массивы)
//    2) object - объекты
    // callable
    // iterable

//Специальные типы:
//    1) resource - дескриптор ресурсов
//    2) NULL

// Скалярные (простые) типы

//Булев тип
//boolean (bool) - может быть либо TRUE, либо FALSE.

$boo = true; // false

//Целые числа
//integer (int)
//
//могут быть указаны в десятичной (основание 10),
//шестнадцатеричной (основание 16),
//восьмеричной (основание 8) или
//двоичной (основание 2) системе счисления,
//
//Размер integer зависит от платформы,
//как правило, максимальное значение примерно равно 2 миллиардам  (это 32-битное знаковое).
//64-битные платформы обычно имеют максимальное значение около 9E18
//
//Размер integer может быть определен с помощью константы PHP_INT_SIZE,
//максимальное значение - с помощью константы PHP_INT_MAX.
//С php 7.0.0 - PHP_INT_MIN, с помощью которого можно определить минимальное значение.
//
//Если PHP обнаружил, что число превышает размер типа integer, он будет интерпретировать его в качестве float.
//
//Результатом 1/2 будет float 0.5.
//Если привести значение к integer, будет отброшена дробная часть числа.
//
//Дробные числа или числа с плавающей точкой "float", "double", или "real"
//float (double)
//
//В PHP имена типов float и double являются синонимами.
//$a = 1.234;
//
//Размер числа с плавающей точкой зависит от платформы,
//максимум, как правило, составляет ~1.8e308 с точностью около 14 десятичных цифр.
//
//Точность чисел с плавающей точкой
//
//Числа с плавающей точкой имеют ограниченную точность,
//Неэлементарные арифметические операции могут давать большие ошибки, кроме того
//например, floor((0.1+0.7)*10)
//
//Если действительно необходима высокая точность, используйте математические функции произвольной точности и gmp-функции
//
//Некоторые числовые операции могут возвращать  NAN.
//Для определения ее наличия необходимо использовать функцию is_nan().
//
//Строки
//string
//
//Строка может быть заключена в:
//    одинарные кавычки
//    двойные кавычки
//
//При использовании одинарных кавычек строка воспринимается как есть, включая (\n, \r и тд). Исключение -  использовать одинарную кавычку внутри строки, проэкранируйте ее обратным слешем (\). Если необходимо написать сам обратный слеш, продублируйте его (\\)
//Экранирование спецсимволов – обратный слеш

//Если строка заключена в двойные кавычки, PHP распознает  \n, \r, \$ и тд
//Использование  двойных  кавычек  позволяет  интерпретатору  заменить указанную в строке переменную на ее значение

$name = "Paul";
echo "My name is $name";
echo 'My name is $name';

//Смешанные типы

//Могут одновременно содержать более одного значения: простого или сложного

//Массивы array

# нумерованный массив
$arr = array(1, 2, 3);

# ассоциативный массив
$arr2 = array(
    'key1' => 'value1',
    'key2' => 'value2',
);

//Объекты object

//создаются на основе заранее определенных классов при помощи оператора new.
$obj = new StdClass();

//Специальные типы
//Специальное значение NULL представляет собой переменную без значения.
//NULL - это единственно возможное значение типа null.

//Переменная считается null, если:
//1. ей была присвоена константа NULL;
//2. ей еще не было присвоено никакого значения;
//3. она была удалена с помощью unset();

//Дескриптор ресурсов - resource

//Cпециальная переменная, содержащая ссылку на внешний ресурс, с которыми можно работать в PHP.
//Ресурсы создаются и используются только специальными функциями.


//Для проверки типа переменной на определенный тип, используются следующие функции:

is_null();
is_bool();
is_int();
is_float();
is_string();
is_array();
is_object();
is_resource();

//PHP не требует явного типа при определении переменной;
//тип переменной определяется по контексту, в котором она используется.

//Для того чтобы привести переменную к желаемому типу, необходимо перед ней поставить, одно из значений

//(int), (integer) - приведение к integer
//(bool), (boolean) - приведение к boolean
//(float), (double), (real) - приведение к float
//(string) - приведение к string
//(array) - приведение к array
//(object) - приведение к object

$age = 37;
$age_str = (string) $age;

//При преобразовании в boolean, следующие значения рассматриваются как FALSE:
//    само значение boolean FALSE
//    integer 0 (ноль)
//    float 0.0 (ноль)
//    пустая строка, и строка "0"
//    массив без элементов
//    особый тип NULL (включая неустановленные переменные)


//Операторы

//1. Операторы присваивания:
//= += -= *= **= /= .= %=
$a = ($b = 4) + 5;

//2. Арифметические операторы:
//+ - * / % **
//** - возведение в степень

//3. Инкремент и декремент:
//++ --

//++$a 	Префиксный инкремент 	Увеличивает $a на единицу, затем возвращает значение $a.
//$a++ 	Постфиксный инкремент 	Возвращает значение $a, затем увеличивает $a на единицу.
//--$a 	Префиксный декремент 	Уменьшает $a на единицу, затем возвращает значение $a.
//$a-- 	Постфиксный декремент 	Возвращает значение $a, затем уменьшает $a на единицу.


//4. Конкатенация – слияние строк: .


//5. Операторы сравнения:
//== === != <> !== > < >= <=
//== TRUE если $a равно $b после преобразования типов.
//=== TRUE если $a равно $b и имеет тот же тип.
//!==  TRUE если $a не равно $b или они разных типов.
// <=>, начиная с версии 7.0.0 - сравнивает переменные и сообщает, какая из них больше, возвращая -1, 0, 1


//7. Логические операторы:
//&& || ! and or
// xor
//$a = 7;
//$b = 8;
//if (a === 7 xor b === 8) {
//    // code
//}

//8. Оператор исполнения ``
$a = `ipconfig`;
echo "<p>$a</p>";

//Константы - Их значение не может изменяться в ходе выполнения скрипта

//Принято имена констант всегда пишутся в верхнем регистре.

//Имя константы должно соответствовать тем же правилам, что и другие имена в PHP, кроме $

//Константы доступны из любой области видимости.
// Можно использовать константы в любом месте вашего скрипта, не обращая внимания на текущую область видимости

//Способы определения констант:

//1. с помощью функции define()
//define ( string $name , mixed $value [, bool $case_insensitive = false ] )
define("CONST_NAME", "const value");

//2. с помощью ключевого слова const вне объявления класса
// Если использована конструкция const, константы могут содержать только скалярные данные

//С PHP 5.6 возможно определять константы как скалярные выражения, и  константы с типом array

//С PHP 7, константы массивы можно задавать через define().

//Получить значение константы можно, указав ее имя.
//Также можно использовать constant() для получения значения константы
get_defined_constants(); // получение списка всех объявленных констант.

// Дополнительно о преобразовании
//Преобразование в целое
//
//Из булевого типа - FALSE преобразуется в 0 (ноль), а TRUE - в 1 (единицу).
//Из чисел с плавающей точкой - число будет округлено в сторону нуля.
//Из строк -  Если строка не содержит какой-либо из символов '.', 'e', или 'E',
// и значение числа помещается в пределы целых чисел (определенных PHP_INT_MAX),
// строка будет распознана как целое число (integer).
//Во всех остальных случаях она считается числом с плавающей точкой (float).
//Значение определяется по начальной части строки
//$foo = 1 + "10.5";
//$foo = 1 + "bob3";

//Из resource - результатом будет уникальный номер ресурса,
// привязанный к resource во время исполнения PHP программы

//Для других типов поведение преобразования в integer не определено.

//Преобразование в строку
//Значение boolean TRUE преобразуется в строку "1",
// а значение FALSE преобразуется в "" (пустую строку).
//Целое (integer) или число с плавающей точкой (float) преобразуется в строку,
// представленную числом, состоящим из его цифр
//Массивы всегда преобразуются в строку "Array",
// так что вы не можете отобразить содержимое массива (array), используя echo.
// Чтобы просмотреть отдельный элемент, используйте что-нибудь вроде echo $arr['foo'].
//Resource всегда всегда преобразуется в string вида "Resource id #1",
// где 1 является номером ресурса привязанного к resource во время выполнения.
///NULL всегда преобразуется в пустую строку.


//Преобразование в массив
//Для любого из типов integer, float, string, boolean и resource,
// преобразование значения в массив дает результатом массив с одним элементом
// (с индексом 0), являющимся скалярным значением, с которого вы начали.

//Если вы преобразуете в массив значение NULL, вы получите пустой массив.




























